Coding Guidelines for IG Inception Layers
-----------------------------------------

This file contains the operational annotation guidelines for annotating according to IG 2.0 in Inception. The IG Inception Layers can be found under https://github.com/InstitutionalGrammar/IG-Inception-Layers

Version: 0.2.4 (C. Frantz, 22nd September 2020)

For general instruction on IG coding and underlying rationale, please refer to the coding guidelines under https://institutionalgrammar.org/institutional-grammar-codebook/. 

Introduction:
-------------

The coding of institutional statements occur on two levels, the syntax level and the statement level, alongside further instruction on coding complex data structures and policy references in the context of syntax-level annotations. A special layer dedicated for handling of inter-coder review discussions is described at the bottom of this document.

The syntax level annotation focuses on the annotation of specific tokens or clauses with the associated IG component. In addition it affords intra-statement relationship (e.g., relationships between components of the statement, such as component-level combinations). 

The statement level identifies the scope of the statements more generally and resolves inter-statement relationships amongst the statements, such as horizontal (e.g., AND, OR) and vertical nesting (e.g., monitored, consequentially), as well as providing references to implied components, or components outside a given statement.

The principal approaches for both coding levels are outlined below (and provide a basis for augmentation for further project-specific guidelines). 

Syntax-level annotation:
------------------------

On syntax level, the following procedural steps apply:

- Identify atomic institutional statements by identifying elementary components of the statement
- Identify syntactic structure of Institutional Statement as either in ABDICO or PDFECO form
- Choose corresponding layer ('IG Core Regulative Syntax'; 'IG Core Constitutive Syntax')
- Commence annotation of token and clauses with the corresponding components

Where nested institutional statements exist, complete the annotation on a given level, before revisiting nested components in a second iteration, e.g., annotating a potentially nested activation condition as activation conditions first, before continuing with the lower-level annotation (e.g., decomposing embedded nested clause into individual components).

Where component-level combinations exist (e.g., eat and drink) within a given statement, annotate those individually as component (e.g., aim), and draw a link from one component to the other. Indicate the logical operator in the link (e.g., AND), as well as precedence (if multiple logical relationships exist).

Specific component types allow further specific annotations (e.g., Circumstance Taxonomy, Institutional Functions, Constitutive Functions) discussed as part of the general coding guidelines for IG 2.0.

Where components of a given institutional statement are implicit or exist outside an institutional statement, indicate those in the 'IG Institutional Statement' layer as part of statement-level annotation.

Specific considerations for complex data structures or policy references that coders may find embedded in institutional statement components are highlighted in the following.

Complex data structures:
------------------------

Where individual components contain complex regular structures (e.g., lists, or quantitative information), those can be decomposed using the 'IG Collection' layer and the 'Complex Data Structure' layer, respectively. The purpose is to make commonly found textual structures machine-readable.

The 'IG Collection' layer identifies elements in lists (e.g., item1 AND item2, etc.) or other logical relationships (e.g., item1 AND item2 XOR item3, etc.). It is further possible to indicate precedence amongst the relationships, and further indicate whether the listing is exhaustive.

The 'IG Complex Data Structure' layer allows for the decomposition of elementary values (e.g., items in a list) in an extensible schema building on the base structure QUALIFIER, COMPARATOR, QUANTITY, UNIT, OBJECT, OBJECT PROPERTY (components can be omitted where suitable). Example: "a bit (qualifier) more than (comparator) 10 (quantity) tons (unit) high-quality (object property) building material (object)"

Policy References:
------------------

Where components make reference to other policy/documents, use the 'IG Policy Resource' layer to provide an absolute reference to the linked policy of concern. This entry can be textual and/or by identifier (e.g., unique identifier) and consider the scope of the referenced statements (e.g., single statement, paragraph, section, Act, etc.)

Where statements make reference to statements within the same policy, use the 'IG Policy Resource Reference' layer to draw a link between source and target policy explicitly. This can further include the specification of scope and textual identifier.

Statement-level annotation:
---------------------------

- Identify statement types for all identified statements incrementally (including overlapping or statements nested statements)
- Choose 'IG Institutional Statement' Layer
- Annotate all statements (including nested ones) and mark those as regulative or constitutive respectively. 
- Draw links between statements where existing (e.g., logical relationships). Where vertically nested (i.e., or else relationship exists), indicate whether statement is monitored or consequential (where not annotated, the statement is presumed monitored). Populate further properties where relevant for each statement, such as IAD rule type and level.
- Where components are implicit (e.g., Attribute) add indicate those in the 'IG Institutional Statement' layer under 'Implicit Components' by listing those in the format COMPONENT: VALUE; COMPONENT: VALUE; ... (e.g., Attribute: Actor; Deontic: must).
- Where components exist outside the institutional statement (e.g., in another statement), resolve those in the 'IG Institutional Statement' layer under 'External Component Reference' by indicating the component name (e.g., Attributes), confirm by clicking 'Add' and clicking on target token outside institutional statement.

Inter-coder discussion:
-----------------------

To facilitate inter-coder discussion, the 'IG Coding Review Indication' layer allows for the annotation of any part of the document to signal need for discussion or otherwise highlight observations. As part of this the coder can provide comments as well as indicate the level of confidence in coding. 


